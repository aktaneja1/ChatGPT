+ true == true
+ sudo podman ps -a -q
/home/jenkins/agent/workspace/secontainer_feature_runContainer@tmp/durable-63f2302c/script.sh: 9: sudo: not found
+ ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i slfuser.pem slfuser@10.231.97.26 sudo podman stop 
Access to this system is provided by Sun Life Financial solely for
authorized business use and may be monitored for technical or
regulatory reasons.  If you do not consent to this monitoring, do not
use this system.

L'accès au système est fourni par la Financière Sun Life à des fins
d'activitès autorisèes uniquement et il peut faire l'objet d'une
surveillance pour des raisons techniques et pour les besoins de la rè
glementation. Si vous ne consentez pas à cette surveillance, veuillez
vous abstenir d'utiliser le système.
Error: you must provide at least one name or id

 sh """
    privateKeyPath=\"/home/jenkins/agent/workspace/*feature*/secrets\"
    ls -lrt
    cd secrets
    ls -lrt
    if ( \"\$removeAll\" == \"true\" )
    then
        {
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i slfuser.pem slfuser@\${INSTANCE_ID} \"sudo podman stop \$(sudo podman ps -a -q)\"
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i slfuser.pem slfuser@\${INSTANCE_ID} \"sudo podman rm \$(sudo podman ps -a -q)\"            
            
        }
    fi
    """


def containersProcessing() {

    sh """
    privateKeyPath=\"/home/jenkins/agent/workspace/*feature*\"
    ls -lrt
    if [ \"\$removeAll\" -eq true ]
    then
        {
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i \$privateKeyPath/slfuser.pem slfuser@\${instanceID} \"docker stop -f \$(sudo podman ps -a -q)\"
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i \$privateKeyPath/slfuser.pem slfuser@\${instanceID} \"docker rm -f \$(sudo podman ps -a -q)\"            
            
        }
    fi
    ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i \$privateKeyPath/slfuser.pem slfuser@\${instanceID} \"docker run -p \$portNumber:\$portNumber \$imageName\"
    """
}

+ privateKeyPath=/home/jenkins/agent/workspace/*feature*
+ ls -lrt
total 16
-rw-r--r--. 1 jenkins users 3148 Jul 27 09:17 Jenkinsfile
-rw-r--r--. 1 jenkins users  112 Jul 27 09:17 pipeline_config.groovy
-rw-r--r--. 1 jenkins users 1693 Jul 27 09:17 slfuser
-rw-r--r--. 1 jenkins users 1681 Jul 27 09:17 slfuser.txt
drwxr-xr-x. 2 jenkins users   21 Jul 27 09:17 secrets
+ [ false -eq true ]
/home/jenkins/agent/workspace/secontainer_feature_runContainer@tmp/durable-a355c26b/script.sh: 4: [: Illegal number: false
+ ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i /home/jenkins/agent/workspace/*feature*/slfuser.pem slfuser@ docker run -p 9080:9080 prod-dtr-ca.sunlifecorp.com/dsaep/template-creator-api:22
Warning: Identity file /home/jenkins/agent/workspace/*feature*/slfuser.pem not accessible: No such file or directory.
ssh: Could not resolve hostname : Name or service not known






def instanceID // for storing Instance id filtered using tag name

def getHost() {
    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'slf-func-ec2-aep_user', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
    {
        //def localName = params.name
        //def localValue = params.value
        sh '''
          instanceID = $(aws ec2 describe-instances --region "ca-central-1" --filter "Name=tag:$name,Values=$value"  --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)
          export instanceID = $instanceID
        '''
        // echo "Host: ${env.instanceID}" // Printing the hostname
    }
}


// Method to fetch and create Private Key
def getPrivatekey() {
    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'slf-func-ec2-aep_user', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
    {

        sh '''
        pwd
        cd /home/jenkins/agent/workspace/*feature
        mkdir secrets
        aws secretsmanager get-secret-value --secret-id poc/mongodb --query "SecretString" --region ca-central-1 --output text > slfuser
        sed 's/{"slfuser":"//g' slfuser > slfuser.txt
        sed 's/"}//g' slfuser.txt > secrets/slfuser
        '''      
    }
}

def containersProcessing() {

    // def localPort = params.portNumber
    // def localimageName = params.imageName
    // def removeFlag = params.removeAll
    sh '''
    ls -lrt
    if ($removeAll == true)
        {
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i slfuser.pem slfuser@$instanceID "docker stop -f $(docker ps -a -q)"
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i slfuser.pem slfuser@$instanceID "docker rm -f $(docker ps -a -q)"            
            
        }
    ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i slfuser.pem slfuser@$instanceID "docker run -p $portNumber:$portNumber $imageName"
    '''
}


pipeline {
    agent { label "terraform-1.1.5" }
     parameters {
        string(name: 'name', description: 'Name as String')
        string(name: 'value', description: 'Value as String')
        booleanParam(name: 'removeAll', defaultValue: false, description: 'Remove all containers')
        string(name: 'imageName', description: 'Image name as String')
        string(name: 'portNumber', description: 'port number as String')
    }

    stages {
            stage('Container Processing') {
                steps {
                    script {
                        env.name = params.name
                        env.value = params.value
                        env.removeAll = params.removeAll
                        env.imageName = params.imageName
                        env.portNumber = params.portNumber

                    }
                    getHost()
                    getPrivatekey()
                    containersProcessing()

                }
            }

    }
}


[Pipeline] sh
+ aws ec2 describe-instances --region ca-central-1 --filter Name=tag:Name,Values=innersource-demo --query Reservations[*].Instances[*].PrivateIpAddress --output text
+ instanceID = 10.231.97.147
/home/jenkins/agent/workspace/secontainer_feature_runContainer@tmp/durable-132d34d4/script.sh: 2: instanceID: not found

Results-oriented professional with 8+ years of experience in automation framework development, team management, and defining strategies for improved ROI.
Proven track record of delivering high-quality results by automating test tasks and enhancing software quality.
Extensive experience in evaluating UI and API automation tools and implementing advanced DevOps concepts, utilizing Jenkins, Docker, terraform, ansible, Kubernetes, and AWS.
Proficient in multiple automation frameworks, including TOSCA Modular FW, Cucumber, Test NG, and data-driven approaches.
Strong understanding of SDLC, test methodologies, and domain expertise in Retail, Insurance, and eCommerce sectors.
Skilled in generating automated scripts for various applications, including Web, Windows, Mobile, Mainframe, and Java-based, and implementing pre and post-deployment testing approaches.

Summary of my profile:
•	Seasoned DevOps leader with 8+ years of experience in creating and implementing automated Infra & frameworks, automating processes, and managing teams
•	Strong track record of designing and deploying scalable cloud-based infrastructure on AWS
•	Demonstrated expertise in infrastructure provisioning using packer, ansible, terraform, and AWS
•	Successfully implemented pipeline based on Docker, Kubernetes, and advanced technologies.
•	Implemented robust CI/CD pipelines with Jenkins, GIT, and Bitbucket for efficient software delivery
•	Proficient in generating automated scripts for various applications, including Web, Windows, Mobile, and Java-based



Seasoned DevOps leader with 8+ years of experience in implementing frameworks, automating processes, and managing teams.
Demonstrated expertise in infrastructure provisioning using packer, ansible, terraform, and AWS.
Successfully developed proof-of-concepts (POCs) on Docker, Kubernetes, and advanced technologies.
Implemented robust CI/CD pipelines with Jenkins, GIT, and Bitbucket for efficient software delivery.
Proficient in generating automated scripts for various applications, including Web, Windows, Mobile, and Java-based.
Strong track record of designing and deploying scalable cloud-based infrastructure on AWS.





services.api.environment.0 must be a string




version: '2'
services:
  api:
    image: local/innersource-api
    environment:
      - JVM_ARGS: >
          -Xms512m
          -Xmx700m
          -Dhttp.proxyHost=proxy-mwg-http.ca.sunlife
          -Dhttp.proxyPort=8080
          -Dhttps.proxyHost=proxy-mwg-http.ca.sunlife
          -Dhttps.proxyPort=8443
          -Dhttp.nonProxyHosts='*.sunlifecorp.com|*.ca.sunlife|*.local'


version: '2'
services:
  api:
    image: local/innersource-api
    environment:
      - JVM_ARGS=-Xms512m
      - JVM_ARGS=-Xmx700m
      - JVM_ARGS=-Dhttp.proxyHost=proxy-mwg-http.ca.sunlife
      - JVM_ARGS=-Dhttp.proxyPort=8080
      - JVM_ARGS=-Dhttps.proxyHost=proxy-mwg-http.ca.sunlife
      - JVM_ARGS=-Dhttps.proxyPort=8443
      - JVM_ARGS=-Dhttp.nonProxyHosts='*.sunlifecorp.com|*.ca.sunlife|*.local'



containers:
        - name: innersource-portal-api
          image: prod-dtr-ca.sunlifecorp.com/innersource/innersource-portal-api
          ports:
            - containerPort: 9080
          resources:
            limits:
              cpu: 300m
              memory: 768Mi
            requests:
              cpu: 250m
              memory: 512Mi
          env:
            - name: JVM_ARGS
              value: -Xms512m -Xmx700m -Dhttp.proxyHost=proxy-mwg-http.ca.sunlife -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxy-mwg-http.ca.sunlife -Dhttps.proxyPort=8443 -Dhttp.nonProxyHosts='*.sunlifecorp.com|*.ca.sunlife|*.local'

version: '2'
services:
  light-proxy:
   image: prod-dtr-ca.sunlifecorp.com/eadpapiops/light-proxy:2.7.1
   ports:
     - "9080:9080"
   volumes:
     - /tmp/innersource/config:/home/default/config
   command: /bin/bash -c "java -Dlight-4j-config-dir=/tmp/config -Dlogback.configurationFile=/tmp/config/logback.xml -jar server.jar"
   extra_hosts:
     - "host.docker.internal:host-gateway"
  api:
   image: local/innersource-api
   environment:
     - JVM_ARGS="-Xms512m -Xmx700m -Dhttp.proxyHost=proxy-mwg-http.ca.sunlife -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxy-mwg-http.ca.sunlife -Dhttps.proxyPort=8443 -Dhttp.nonProxyHosts='*.sunlifecorp.com|*.ca.sunlife|*.local'"
  ui:
   image: prod-dtr-ca.sunlifecorp.com/innersource/innersource-portal-ui@sha256:0ce5c8e4e0019412da4d664c1b66a9ede4bd462bd5231de025ad17afeb438afb



docker-api-1          | Error: Could not find or load main class "-Xms512m
docker-api-1          | Caused by: java.lang.ClassNotFoundException: "-Xms512m
docker-api-1 exited with code 1



version: '3'
services:
  light-proxy:
    image: prod-dtr-ca.sunlifecorp.com/eadpapiops/light-proxy:2.7.1
    ports:
      - '9080:9080'
    volumes:
      - /tmp/config:/home/default/config
      - ./config:/config
    environment:
      - LIGHT_4J_CONFIG_DIR=/config
      - LOGBACK_CONFIGURATION_FILE=/config/logback.xml
    command: /bin/bash -c "java -Dlight-4j-config-dir=/config -Dlogback.configurationFile=/config/logback.xml -jar server.jar"
    extra_hosts:
      - "host.docker.internal:host-gateway"





docker run -p 8084:8084 --add-host=host.docker.internal:host-gateway -v C:/ST/eadp-eventhub-kafkasidecar-3/config/local:/config prod-dtr-ca.sunlifecorp.com/eadpeventhubops/kafkasidecar:1.3.0


version: '3'
services:
  light-proxy:
    image: prod-dtr-ca.sunlifecorp.com/eadpapiops/light-proxy:2.7.1
    ports:
      - '9080:9080'
    volumes:
      - /tmp/config:/home/default/config
      - ./config:/config
    command: /bin/bash -c "java -Dlight-4j-config-dir=/config -Dlogback.configurationFile=/config/logback.xml -jar server.jar"
    network_mode: host




version: '2'
services:
        proxy:
                image: prod-dtr-ca.sunlifecorp.com/eadpapiops/light-proxy:2.7.1
                ports:
                        - "9080:9080"
        api:
                image: prod-dtr-ca.sunlifecorp.com/innersource/innersource-portal-api
                environment:
                        - JVM_ARGS="-Xms512m -Xmx700m -Dhttp.proxyHost=proxy-mwg-http.ca.sunlife -Dhttp.proxyPort=8080 -Dhttps.proxyHost=proxy-mwg-http.ca.sunlife -Dhttps.proxyPort=8443 -Dhttp.nonProxyHosts='*.sunlifecorp.com|*.ca.sunlife|*.local'"

        ui:
                image: prod-dtr-ca.sunlifecorp.com/innersource/innersource-portal-ui@sha256:0ce5c8e4e0019412da4d664c1b66a9ede4bd462bd5231de025ad17afeb438afb




java -Dlight-4j-config-dir=/config -Dlogback.configurationFile=/config/logback.xml -jar server.jar


podman run -it -p 9080:9080 --network=host -v /tmp/config:/home/default/config prod-dtr-ca.sunlifecorp.com/eadpapiops/light-proxy:2.7.1 /bin/bash





sudo -H pip3 install --upgrade pip --index-url=https://pypi.org/simple/

 sudo yum upgrade python3-pip

sudo pip3 install podman-compose 


yum python3-pip install podman-compose


sudo -H pip3 install --upgrade pip
WARNING: Running pip install with root privileges is generally not a good idea. Try `pip3 install --user` instead.
Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7fc6e1281b70>, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pip/
Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7fc6e1281c88>, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pip/
Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7fc6e1281d30>, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pip/
Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(<pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7fc6e1281e48>, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pip/




aepUpdate = cursor.execute("""
UPDATE dbo.AEP_TABLEAU_DATA
SET AEP_SERVER_STATUS = ?
WHERE AEP_LOB_NAME = ? AND AEP_SERVER_NAME = ?
""",
aepServerStatus, aepServerLOB, aepServerName).rowcount



In this query, the ? placeholders are used to pass the parameter values to the query. The values aepServerStatus, aepServerLOB, and aepServerName are provided as arguments to the execute function.

Make sure to replace the aepServerStatus, aepServerLOB, and aepServerName variables with the appropriate values according to your use case before executing the script.






#!/usr/bin/env python

###############
# Dependencies
###############
try:

  import sys
  import os
  import socket
  import pyodbc
  import datetime

except ImportError as err:
  print('ERROR: Python modules verification failed. Error is: ' + err)
  sys.exit(2)

###########################
# Ansible passed variables
###########################
server = '{{ aep_tableau_dbHost }}'
database = '{{ aep_tableau_db }}'
username = '{{ aep_tableau_dbUser }}'
password = '{{ aep_tableau_dbPass }}'
aepServerName = '{{ v_aepServer }}'
aepServerLOB = '{{ v_aepLob }}'
aepServerStatus = '{{ v_aepServerStatus }}'

####################################################
# Connect and query into
####################################################
drivers = [item for item in pyodbc.drivers()]
driver = drivers[-1]
print("driver:{}".format(driver))

cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password)
cursor = cnxn.cursor()

cursor.execute("SELECT @@version;") 
row = cursor.fetchone() 
while row: 
    print(row[0])
    row = cursor.fetchone()

aepUpdate = cursor.execute(UPDATE dbo.AEP_TABLEAU_DATA SET AEP_SERVER_STATUS = $aepServerStatus WHERE AEP_LOB_NAME = $aepServerLOB AND AEP_SERVER_NAME = $aepServerStatus).rowcount

cnxn.commit()
print("Rows Updated: " + str(aepUpdate))





- name: Copy Python script to temporary execution location
    template:
      src: "{{ aepSql_script }}"
      dest: ./tmp
      mode: 0755

  - name: "Execute AEP Py Script"
    shell: |
      ./tmp/{{ aepSql_script }} "{{ AEP_LOB_NAME }}" "{{ AEP_PROJECT_NAME }}" "{{ AEP_APP_NAME }}" "{{ AEP_ENV_NAME }}" "{{ AEP_SERVER_NAME }}" "{{ AEP_SERVER_STATUS }}" "{{ AEP_SERVER_PROV_DT }}" "{{ AEP_SERVER_DECOMM_DT }}" "{{ AEP_SERVER_DURATION }}" "{{ AEP_PATTERN_LOB }}" "{{ AEP_PATTERN_NAME }}" "{{ AEP_SAVINGS_LOB }}" "{{ AEP_SAVINGS_PROJECT }}" {{ AEP_SAVINGS_COST }} "{{ AEP_SV_PROJECT }}" "{{ AEP_SV_VS_STATUS }}" {{ AEP_SV_VS_COUNT }} {{ AEP_INC_NUM }} "{{ AEP_INC_APP_NAME }}" "{{ AEP_INC_SERVER }}" {{ AEP_CC_NUM }} "{{ AEP_CC_OWNER }}"

aep_mssql.py.j2


TASK [server_decommissioning : Execute AEP Py Script] **************************
fatal: [localhost]: FAILED! => {"changed": true, "cmd": "./tmp/aep_mssql.py.j2 \"MDPowers\" \"null\" \"null\" \"AEP Dev\" \"cl0a2327\" \"Decommissioned\" \"null\" \"null\" \"null\" \"MDPowers\" \"null\" \"MDPowers\" \"null\" 183402 \"NA\" \"NA\" NA NA \"NA\" \"NA\" NA \"NA\"", "delta": "0:00:00.007823", "end": "2023-06-23 06:50:44.177110", "msg": "non-zero return code", "rc": 126, "start": "2023-06-23 06:50:44.169287", "stderr": "/bin/sh: ./tmp/aep_mssql.py.j2: Not a directory", "stderr_lines": ["/bin/sh: ./tmp/aep_mssql.py.j2: Not a directory"], "stdout": "", "stdout_lines": []}





The task includes an option with an undefined variable. The error was: 'aep' is undefined\n\nThe error appears to be in '/ansible/tower/tmpjobs/bwrap_2419535_fx17rz8s/awx_2419535_j5cxobw4/project/roles/server_decommissioning/tasks/main.yml': line 2, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n---\n- name: \"Read cmdb_ci_server information from Service Now\"\n  ^ here\n"

---
- name: "Read cmdb_ci_server information from Service Now"
  no_log: false
  uri:
    url: "{{ v_aep_dev_cmdb_ci_server_url }}"
    user: "{{ aep_tableau_dbUser }}"
    password: "{{aep-serviceNow-password}}"
    method: GET
  register: aep_cmdb_ci

- name: "Read aep server_build information from Service Now"
  no_log: false
  uri:
    url: "{{ v_aep_dev_server_build_url }}"
    user: "{{ aep_tableau_dbUser }}"
    password: "{{aep-serviceNow-password}}"
    method: GET
  register: aep_server_build

- set_fact:
    AEP_LOB_NAME: "{{ v_aepLob }}"
    AEP_PROJECT_NAME: "{{ aep_server_build.json.result[0].u_project_name | default('null') }}"
    AEP_APP_NAME: "{{ aep_server_build.json.result[0].u_application_usage | default('null') }}"
    AEP_ENV_NAME: "AEP Dev"
    AEP_SERVER_NAME: "{{ aep_server_build.json.result[0].u_host_name | default(v_aepServer) }}"
    AEP_SERVER_STATUS: "Decommissioned"
    AEP_SERVER_PROV_DT: "{{ aep_cmdb_ci.json.result[0].sys_created_on | default('null') }}"
    AEP_SERVER_DECOMM_DT: "{{ aep_cmdb_ci.json.result[0].u_host_decom_date | default('null') }}"
    AEP_SERVER_DURATION: "{{ aep_server_build.json.result[0].u_build_duration | default('null') }}"
    AEP_PATTERN_LOB: "{{ v_aepLob }}"
    AEP_PATTERN_NAME: "{{ aep_server_build.json.result[0].u_application_name_string | default('null')  }}"
    AEP_SAVINGS_LOB: "{{ v_aepLob }}"
    AEP_SAVINGS_PROJECT: "{{ aep_server_build.json.result[0].u_project_name | default('null') }}"
    AEP_SAVINGS_COST: "{{ aep_server_build.json.result[0].u_cost_centre | default('183402') }}"
    AEP_SV_PROJECT: "NA"
    AEP_SV_VS_STATUS: "NA"
    AEP_SV_VS_COUNT: "NA"
    AEP_INC_NUM: "NA"
    AEP_INC_APP_NAME: "NA"
    AEP_INC_SERVER: "NA"
    AEP_CC_NUM: "NA"
    AEP_CC_OWNER: "NA"

- name: Copy Python script to temporary execution location
  template:
    src: "{{ aepSql_script }}"
    dest: ./tmp
    mode: 0755

- name: "Execute AEP Py Script"
  shell: |
    ./tmp/{{ aepSql_script }} "{{ AEP_LOB_NAME }}" "{{ AEP_PROJECT_NAME }}" "{{ AEP_APP_NAME }}" "{{ AEP_ENV_NAME }}" "{{ AEP_SERVER_NAME }}" "{{ AEP_SERVER_STATUS }}" "{{ AEP_SERVER_PROV_DT }}" "{{ AEP_SERVER_DECOMM_DT }}" "{{ AEP_SERVER_DURATION }}" "{{ AEP_PATTERN_LOB }}" "{{ AEP_PATTERN_NAME }}" "{{ AEP_SAVINGS_LOB }}" "{{ AEP_SAVINGS_PROJECT }}" {{ AEP_SAVINGS_COST }} "{{ AEP_SV_PROJECT }}" "{{ AEP_SV_VS_STATUS }}" {{ AEP_SV_VS_COUNT }} {{ AEP_INC_NUM }} "{{ AEP_INC_APP_NAME }}" "{{ AEP_INC_SERVER }}" {{ AEP_CC_NUM }} "{{ AEP_CC_OWNER }}"



v_aepServer: "{{ ev_targets | mandatory }}"
v_aepLob: "{{ ev_aepLob | mandatory }}"
v_aep_dev_cmdb_ci_server_url: "https://sunlife.service-now.com/api/now/table/cmdb_ci_server?sysparm_display_value=true&u_aep_env=AEP%20Dev&name={{ v_aepServer }}"
v_aep_dev_server_build_url: "https://sunlife.service-now.com/api/now/table/u_server_build?sysparm_query=u_request_item.cat_item%3Df6edfa901b99a41087b842a7bc4bcbc6&sysparm_display_value=true&u_host_name={{ v_aepServer }}"
aepSql_script: "aep_mssql.py.j2"
aep_tableau_dbHost: "sv0a0069.sunlifecorp.com,50013"
aep_tableau_dbUser: "microdev"
aep-serviceNow-password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          61643937343963666262636561643431613732663735313766333664663238363439333766333538
          6234613163363132666262663664393233626539333762390a383964643039303337336436363861
          31646531336335343330316463353436366162363233363436383835666231616665396366343062
          6332316663643462330a376465303165366133333731393535303331623832663063643266313437
          3665













podman run -p 9080:9080 --add-host=host.podman.internal:host-gateway -v /tmp/value.yml:/config/value.yml prod-dtr-ca.sunlifecorp.com/eadpapiops/light-proxy:2.7.1
Error: invalid IP address in add-host: "host-gateway"

ERROR! couldn't resolve module/action 'aws_secretsmanager_facts'. This often indicates a misspelling, missing collection, or incorrect module path.


- set_fact:
    AEP_LOB_NAME: "{{ v_aepLob }}"
    AEP_PROJECT_NAME: "{{ aep_server_build.json.result[0].u_project_name | default('null') }}"
    AEP_APP_NAME: "{{ aep_server_build.json.result[0].u_application_usage | default('null') }}"
    AEP_ENV_NAME: "AEP Dev"
    AEP_SERVER_NAME: "{{ aep_server_build.json.result[0].u_host_name | default(v_aepServer) }}"
    AEP_SERVER_STATUS: >-
      {% if aep_cmdb_ci.json.result[0].hardware_status == "Installed" %}
        In-Use
      {% else %}
        {{ aep_cmdb_ci.json.result[0].hardware_status | default('null') }}
      {% endif %}
    AEP_SERVER_PROV_DT: "{{ aep_cmdb_ci.json.result[0].sys_created_on | default('null') }}"
    AEP_SERVER_DECOMM_DT: "{{ aep_cmdb_ci.json.result[0].u_host_decom_date | default('null') }}"
    AEP_SERVER_DURATION: "{{ aep_server_build.json.result[0].u_build_duration | default('null') }}"
    AEP_PATTERN_LOB: "{{ v_aepLob }}"
    AEP_PATTERN_NAME: "{{ aep_server_build.json.result[0].u_application_name_string | default('null') }}"
    AEP_SAVINGS_LOB: "{{ v_aepLob }}"
    AEP_SAVINGS_PROJECT: "{{ aep_server_build.json.result[0].u_project_name | default('null') }}"
    AEP_SAVINGS_COST: "{{ aep_server_build.json.result[0].u_cost_centre | default('183402') }}"
    AEP_SV_PROJECT: "NA"
    AEP_SV_VS_STATUS: "NA"
    AEP_SV_VS_COUNT: "NA"
    AEP_INC_NUM: "NA"
    AEP_INC_APP_NAME: "NA"
    AEP_INC_SERVER: "NA"
    AEP_CC_NUM: "NA"
    AEP_CC_OWNER: "NA"







Led DevOps initiatives and served as the primary point of contact for all DevOps-related activities, overseeing a team of engineers and ensuring seamless collaboration across departments.

Designed and implemented end-to-end DevOps processes and practices, resulting in improved software delivery speed, quality, and reliability.

Worked closely with development teams to integrate and optimize software builds, ensuring smooth deployments and minimizing downtime.

Implemented robust monitoring and alerting solutions using tools like Grafana and ELK Stack, providing real-time visibility into system health, performance, and metrics.


Collaborated with cross-functional teams to ensure smooth deployments across Windows and Linux platforms, ensuring compatibility and optimal performance.

Utilized scripting languages and automation tools (e.g., Bash, PowerShell) to streamline repetitive tasks, enhance productivity, and improve overall efficiency


Worked closely with development teams to identify and resolve build and deployment issues, ensuring successful software releases and minimizing downtime.

Leveraged containerization technologies like Docker to package applications and dependencies, simplifying deployment across different environments and platforms.

Proficiently utilized configuration management tools (e.g., Ansible, Puppet) to automate and standardize system configurations across Windows and Linux environments, ensuring consistency and reducing manual effort


Collaborated with QA teams to implement automated testing frameworks and integrate them into the deployment pipelines, improving code quality and reducing regression issues.

Participated in incident response and troubleshooting activities, working closely with operations teams to identify root causes and implement corrective actions.

Stayed updated with the latest industry trends and emerging technologies related to Windows and Linux platforms, continuously enhancing skills and knowledge in the DevOps domain.






Led and successfully implemented end-to-end DevOps processes and practices in a real-time project, utilizing a combination of the following tools:

Scripting Language: Leveraged Groovy scripting language to automate deployment processes and streamline operations.
Demonstrated expertise in infrastructure provisioning and configuration management using the following tools:

Infra Tools: Designed and implemented infrastructure solutions using Packer, Ansible, Terraform, Kubernetes, and Docker.
Infra Lang: Proficiently utilized HCL2 and YAML to define infrastructure as code (IaC) for improved scalability and manageability.
Spearheaded development activities by utilizing the following programming languages and version control systems:

Programming Language: Leveraged Java and Python to develop custom tools and applications, enhancing automation and integration capabilities.
CI/CD Tools: Implemented robust CI/CD pipelines using Jenkins, GIT, and Bitbucket for efficient software delivery and collaboration.
Ensured seamless data management and performance optimization through the following capabilities:

Database: Leveraged SQL to efficiently manage and manipulate relational databases, ensuring data integrity and performance.
Leveraged cloud services to architect and manage scalable and reliable infrastructure:

Cloud: Utilized AWS to design, deploy, and manage cloud-based infrastructure, ensuring high availability and scalability.
Created comprehensive monitoring and visualization solutions for effective infrastructure management:

Dashboard: Implemented Grafana dashboards to provide real-time visibility into system health, performance, and metrics.
Automated testing processes and ensured quality assurance through the following tools:

Automation Tools: Utilized Selenium, Appium, and TOSCA for automated testing of web and mobile applications, ensuring reliable software delivery.
API Tools: Employed Postman, Ready API, and Rest Assured for testing and validating APIs, ensuring their functionality and performance.
Managed mobile application testing across various devices and platforms:

Device Farm: Utilized Mobile Center to manage and test mobile applications across a wide range of devices and platforms.
Demonstrated versatility in working with multiple platforms and environments:

Platform: Proficiently managed deployments on both Windows and Linux platforms, ensuring compatibility and stability.
Possessed a solid understanding of network and security fundamentals, with experience in handling real-time streaming data using Kafka.

Effectively tracked issues and managed projects using Jira, ensuring timely resolution and smooth project delivery.

These pointers reflect your experience as a DevOps Lead and highlight your ability to successfully implement and leverage various tools in real-time projects.










ADD ../../*.jar /tmp


ARG BUILD_ENV=local

FROM prod-dtr-ca.sunlifecorp.com/whs/tomcatbase:2.3.4.release-20201015141323 as base

LABEL com.sunlife.image.target=prod-dtr-ca.sunlifecorp.com/innersource/innersource-portal-api
LABEL com.sunlife.image.owner=innersource
LABEL com.sunlife.image.releasecandidate=false

FROM prod-dtr-ca.sunlifecorp.com/devopsappdev/build-artifact-extractor:1.0.0 AS build-info-extractor
ARG BUILD_NAME
ARG BUILD_NUMBER
RUN /build-extractor.sh -b "${BUILD_NAME}" -n "${BUILD_NUMBER}"

FROM base as local-build
ADD build/libs/innersource-portal-api-svc-rest*.jar /tmp/
ADD config /config
ADD application.properties /config/
RUN cd /tmp && \
    ls -lah && \
    rm *sources.jar && \
    rm *plain.jar && \
    jar xf *.jar && \
	/scripts/reconcile.sh /tmp && \
	cp -R /tmp/BOOT-INF/classes/* /app/BOOT-INF/classes/ && \
    cp /config/application.properties /app/BOOT-INF/classes/ && \
    cp -R /tmp/META-INF /app/META-INF/

FROM base as ci-build
USER root
COPY --from=build-info-extractor /tmp/innersource-portal-api-svc-rest*.jar /tmp/
RUN cd /tmp && \
    ls -lah && \
    jar xf *.jar && \
	/scripts/reconcile.sh /tmp && \
	cp -R /tmp/BOOT-INF/classes/* /app/BOOT-INF/classes/ && \
    cp -R /tmp/META-INF /app/META-INF/

FROM ${BUILD_ENV}-build as build
COPY config /config
EXPOSE 9080
#
# The entrypoint defined by the springboot-tomcat-base layer uses gosu to switch
# to the default user at runtime, after initializing volume file permissions
# as required.  If you override that entrypoint (which is not recommended), you
# should be certain to avoid running as root.



---------------------------------------


ARG BUILD_ENV=local

FROM prod-dtr-ca.sunlifecorp.com/whs/ibm-http-server:9.0.5.7 as base

LABEL com.sunlife.image.target=prod-dtr-ca.sunlifecorp.com/innersource/innersource-portal-ui
LABEL com.sunlife.image.owner=innersource
LABEL com.sunlife.image.releasecandidate=false

ARG BUILD_NAME
ARG BUILD_NUMBER

FROM base as common-build
COPY ihs/app-specific.conf /opt/ibm/HTTPServer/conf/app-specific.conf
COPY ihs/appInitContainer.sh /scripts/appInitContainer.sh
RUN cd /opt/ibm/HTTPServer/conf && \
    ls -lah && \
    cp httpd.conf httpd.conf.default && \
    sed -i 's|#LoadModule ibm_ssl_module modules/mod_ibm_ssl.so|LoadModule ibm_ssl_module modules/mod_ibm_ssl.so|g' httpd.conf && \
    sed -i '/^<\/VirtualHost>$/i Include conf\/app-specific.conf' httpd.conf && \
    sed -i 's/^Timeout [0-9]*/Timeout 60/g' httpd.conf && \
    curl --insecure https://artifactory.sunlifecorp.com/artifactory/dcs-container-release-local/SLF-certs/SLF-CA3.crt > /tmp/SLF-CA3.crt && \
    curl --insecure https://artifactory.sunlifecorp.com/artifactory/dcs-container-release-local/SLF-certs/SLF-CA4.crt > /tmp/SLF-CA4.crt && \
    curl --insecure https://artifactory.sunlifecorp.com/artifactory/dcs-container-release-local/SLF-certs/SLF-ROOT-CA.crt > /tmp/SLF-ROOT-CA.crt && \
    curl --insecure https://artifactory.sunlifecorp.com/artifactory/dcs-container-release-local/SLF-certs/web-gateway.crt > /tmp/web-gateway.crt && \
    keypwd=$(openssl rand -hex 16) && \
    gskcapicmd -keydb -create -db keyfile.kdb -pw $keypwd -stash && \
    gskcapicmd -cert -add -db keyfile.kdb -file /tmp/SLF-CA3.crt -pw $keypwd && \
    gskcapicmd -cert -add -db keyfile.kdb -file /tmp/SLF-CA4.crt -pw $keypwd && \
    gskcapicmd -cert -add -db keyfile.kdb -file /tmp/SLF-ROOT-CA.crt -pw $keypwd && \
    gskcapicmd -cert -add -db keyfile.kdb -file /tmp/web-gateway.crt -pw $keypwd && \
    chmod +x /scripts/appInitContainer.sh

FROM common-build as local-build
ADD dist/ /opt/ibm/HTTPServer/htdocs/dist/

FROM common-build as ci-build
ADD --chown=root https://bitbucket.sunlifecorp.com/projects/CASC/repos/build-artifact-extractor/raw/build-extractor.sh /tmp/download/build-extractor.sh
RUN cd /tmp/download && chmod +x build-extractor.sh && \
    ./build-extractor.sh -b "${BUILD_NAME}" -n "${BUILD_NUMBER}" -f "/tmp/download" && \
    ls -lah && \
    cp /tmp/download/innersource-portal-ui-*-dist.zip /tmp && \
    cd /tmp && \
    ls -lah && \
    unzip innersource-portal-ui-*-dist.zip && \
    unzip -d /opt/ibm/HTTPServer/htdocs/dist/ innersource-portal-ui.zip5








main.yml

---
- name: "Read cmdb_ci_server information from Service Now"
  no_log: true
  uri:
    url: "{{ v_aep_dev_cmdb_ci_server_url }}"
    user: "{{ v_aepSnowUser }}"
    password: "{{ v_aepSnowPass }}"
    method: GET
  register: aep_cmdb_ci

- name: "Read aep server_build information from Service Now"
  no_log: true
  uri:
    url: "{{ v_aep_dev_server_build_url }}"
    user: "{{ v_aepSnowUser }}"
    password: "{{ v_aepSnowPass }}"
    method: GET
  register: aep_server_build

- set_fact:
    AEP_LOB_NAME: "{{ v_aepLob }}"
    AEP_PROJECT_NAME: "{{ aep_server_build.json.result[0].u_project_name | default('null') }}"
    AEP_APP_NAME: "{{ aep_server_build.json.result[0].u_application_usage | default('null') }}"
    AEP_ENV_NAME: "AEP Dev"
    AEP_SERVER_NAME: "{{ aep_server_build.json.result[0].u_host_name | default(v_aepServer) }}"
    AEP_SERVER_STATUS: "{{ aep_cmdb_ci.json.result[0].hardware_status  | default('null') }}"
    AEP_SERVER_PROV_DT: "{{ aep_cmdb_ci.json.result[0].sys_created_on | default('null') }}"
    AEP_SERVER_DECOMM_DT: "{{ aep_cmdb_ci.json.result[0].u_host_decom_date | default('null') }}"
    AEP_SERVER_DURATION: "{{ aep_server_build.json.result[0].u_build_duration | default('null') }}"
    AEP_PATTERN_LOB: "{{ v_aepLob }}"
    AEP_PATTERN_NAME: "{{ aep_server_build.json.result[0].u_application_name_string | default('null')  }}"
    AEP_SAVINGS_LOB: "{{ v_aepLob }}"
    AEP_SAVINGS_PROJECT: "{{ aep_server_build.json.result[0].u_project_name | default('null') }}"
    AEP_SAVINGS_COST: "{{ aep_server_build.json.result[0].u_cost_centre | default('183402') }}"
    AEP_SV_PROJECT: "NA"
    AEP_SV_VS_STATUS: "NA"
    AEP_SV_VS_COUNT: "NA"
    AEP_INC_NUM: "NA"
    AEP_INC_APP_NAME: "NA"
    AEP_INC_SERVER: "NA"
    AEP_CC_NUM: "NA"
    AEP_CC_OWNER: "NA"

- name: Copy Python script to temporary execution location
  template:
    src: "{{ aepSql_script }}"
    dest: ./tmp
    mode: 0755

- name: "Execute AEP Py Script"
  shell: |
    ./tmp/{{ aepSql_script }} "{{ AEP_LOB_NAME }}" "{{ AEP_PROJECT_NAME }}" "{{ AEP_APP_NAME }}" "{{ AEP_ENV_NAME }}" "{{ AEP_SERVER_NAME }}" "{{ AEP_SERVER_STATUS }}" "{{ AEP_SERVER_PROV_DT }}" "{{ AEP_SERVER_DECOMM_DT }}" "{{ AEP_SERVER_DURATION }}" "{{ AEP_PATTERN_LOB }}" "{{ AEP_PATTERN_NAME }}" "{{ AEP_SAVINGS_LOB }}" "{{ AEP_SAVINGS_PROJECT }}" {{ AEP_SAVINGS_COST }} "{{ AEP_SV_PROJECT }}" "{{ AEP_SV_VS_STATUS }}" {{ AEP_SV_VS_COUNT }} {{ AEP_INC_NUM }} "{{ AEP_INC_APP_NAME }}" "{{ AEP_INC_SERVER }}" {{ AEP_CC_NUM }} "{{ AEP_CC_OWNER }}"


aep_mssql.py.j2

#!/usr/bin/env python

###############
# Dependencies
###############
try:

  import sys
  import os
  import socket
  import pyodbc
  import datetime

except ImportError as err:
  print('ERROR: Python modules verification failed. Error is: ' + err)
  sys.exit(2)

###########################
# Ansible passed variables
###########################
server = '{{ aep_tableau_dbHost }}'
database = '{{ aep_tableau_db }}'
username = '{{ aep_tableau_dbUser }}'
password = '{{ aep_tableau_dbPass }}'

AEP_LOB_NAME = sys.argv[1]
AEP_PROJECT_NAME = sys.argv[2]
AEP_APP_NAME = sys.argv[3]
AEP_ENV_NAME = sys.argv[4]
AEP_SERVER_NAME = sys.argv[5]
AEP_SERVER_STATUS = sys.argv[6]
AEP_SERVER_PROV_DT = sys.argv[7]
AEP_SERVER_DECOMM_DT = sys.argv[8]
AEP_SERVER_DURATION = sys.argv[9]
AEP_TIMESTAMP = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
AEP_PATTERN_LOB = sys.argv[10]
AEP_PATTERN_NAME = sys.argv[11]
AEP_SAVINGS_LOB = sys.argv[12]
AEP_SAVINGS_PROJECT = sys.argv[13]
AEP_SAVINGS_COST = sys.argv[14]
AEP_SV_PROJECT = sys.argv[15]
AEP_SV_VS_STATUS = sys.argv[16]
AEP_SV_VS_COUNT = sys.argv[17]
AEP_INC_NUM = sys.argv[18]
AEP_INC_APP_NAME = sys.argv[19]
AEP_INC_SERVER = sys.argv[20]
AEP_CC_NUM = sys.argv[21]
AEP_CC_OWNER = sys.argv[22]

####################################################
# Connect and query into
####################################################
drivers = [item for item in pyodbc.drivers()]
driver = drivers[-1]
print("driver:{}".format(driver))

cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password)
cursor = cnxn.cursor()

cursor.execute("SELECT @@version;") 
row = cursor.fetchone() 
while row: 
    print(row[0])
    row = cursor.fetchone()

aepInsert = cursor.execute("""
INSERT INTO dbo.AEP_TABLEAU_DATA (AEP_LOB_NAME, AEP_PROJECT_NAME, AEP_APP_NAME,AEP_ENV_NAME,AEP_SERVER_NAME,AEP_SERVER_STATUS,AEP_SERVER_PROV_DT,AEP_SERVER_DECOMM_DT,AEP_SERVER_DURATION,AEP_TIMESTAMP,AEP_PATTERN_LOB,AEP_PATTERN_NAME,AEP_SAVINGS_LOB,AEP_SAVINGS_PROJECT,AEP_SAVINGS_COST,AEP_SV_PROJECT,AEP_SV_VS_STATUS,AEP_SV_VS_COUNT,AEP_INC_NUM,AEP_INC_APP_NAME,AEP_INC_SERVER,AEP_CC_NUM,AEP_CC_OWNER)
VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""",
AEP_LOB_NAME, AEP_PROJECT_NAME, AEP_APP_NAME,AEP_ENV_NAME,AEP_SERVER_NAME,AEP_SERVER_STATUS,AEP_SERVER_PROV_DT,AEP_SERVER_DECOMM_DT,AEP_SERVER_DURATION,AEP_TIMESTAMP,AEP_PATTERN_LOB,AEP_PATTERN_NAME,AEP_SAVINGS_LOB,AEP_SAVINGS_PROJECT,AEP_SAVINGS_COST,AEP_SV_PROJECT,AEP_SV_VS_STATUS,AEP_SV_VS_COUNT,AEP_INC_NUM,AEP_INC_APP_NAME,AEP_INC_SERVER,AEP_CC_NUM,AEP_CC_OWNER).rowcount

cnxn.commit()
print("Rows inserted: " + str(aepInsert))


vars.main.yml

v_aepServer: "{{ ev_targets | mandatory }}"
v_aepLob: "{{ ev_aepLob | mandatory }}"
v_aep_dev_cmdb_ci_server_url: "{{ v_ServiceNowApiURL }}/now/table/cmdb_ci_server?sysparm_display_value=true&u_aep_env=AEP%20Dev&name={{ v_aepServer }}"
v_aep_dev_server_build_url: "{{ v_ServiceNowApiURL }}/now/table/u_server_build?sysparm_query=u_request_item.cat_item%3Df6edfa901b99a41087b842a7bc4bcbc6&sysparm_display_value=true&u_host_name={{ v_aepServer }}"
aepSql_script: "aep_mssql.py.j2"
aep_tableau_dbHost: "sv0a0069.sunlifecorp.com,50013"
aep_tableau_dbUser: "microdev"



Branch event
[JTE] pipeline_config.groovy/pipeline_config.groovy does not exist. (show)
[JTE] Obtained Pipeline Configuration File (show)
[JTE] Pipeline Configuration Modifications (show)
[JTE] Obtained Template Configuration File (show)
[JTE] Pipeline Configuration Modifications (show)
[JTE] Obtained Repository Jenkinsfile (show)
[JTE] Loading Library git (show)
[JTE] Loading Library tflint (show)
[JTE] Loading Library sonarqube (show)
[JTE] Loading Library packer (show)
[Pipeline] Start of Pipeline
[Pipeline] node
Agent packer-build-agent-1.7.10-sjkxd is provisioned from template packer-build-agent-1.7.10
---
apiVersion: "v1"
kind: "Pod"
metadata:
  annotations:
    ca.broadcom.com/autoattach.enabled: "false"
  labels:
    jenkins: "slave"
    jenkins/label-digest: "cffb8142a1bd5e2e794d60a8cc4de7ba63ddec49"
    jenkins/label: "packer-1.7.10"
  name: "packer-build-agent-1.7.10-sjkxd"
spec:
  containers:
  - env:
    - name: "JENKINS_SECRET"
      value: "********"
    - name: "JENKINS_AGENT_NAME"
      value: "packer-build-agent-1.7.10-sjkxd"
    - name: "JENKINS_WEB_SOCKET"
      value: "true"
    - name: "JENKINS_NAME"
      value: "packer-build-agent-1.7.10-sjkxd"
    - name: "JENKINS_AGENT_WORKDIR"
      value: "/home/jenkins/agent"
    - name: "JENKINS_URL"
      value: "https://jenkins-devops.sunlifecorp.com/"
    image: "prod-dtr-ca.sunlifecorp.com/devops/packer-build-agent-1.7.10:prod"
    imagePullPolicy: "Always"
    name: "jnlp"
    resources:
      limits:
        memory: "8Gi"
        cpu: "2"
      requests:
        memory: "2Gi"
        cpu: "500m"
    tty: true
    volumeMounts:
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false
    workingDir: "/home/jenkins/agent"
  hostNetwork: false
  nodeSelector:
    sunlife.com/node.sdlc.prod: "true"
    sunlife.com/node.licensing.none: "true"
  restartPolicy: "Never"
  volumes:
  - emptyDir:
      medium: ""
    name: "workspace-volume"

Running on packer-build-agent-1.7.10-sjkxd in /home/jenkins/agent/workspace/ld_aep-philippines-packer_master
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
The recommended git tool is: NONE
using credential gitget-ssh
Cloning the remote Git repository
Cloning with configured refspecs honoured and without tags
Cloning repository ssh://git@bitbucket.sunlifecorp.com/DDM/aep-philippines-packer.git
 > git init /home/jenkins/agent/workspace/ld_aep-philippines-packer_master # timeout=10
Fetching upstream changes from ssh://git@bitbucket.sunlifecorp.com/DDM/aep-philippines-packer.git
 > git --version # timeout=10
 > git --version # 'git version 2.30.2'
using GIT_SSH to set credentials SSH Key
[INFO] Currently running in a labeled security context
 > /usr/bin/chcon --type=ssh_home_t /home/jenkins/agent/workspace/ld_aep-philippines-packer_master@tmp/jenkins-gitclient-ssh14975384121263030611.key
Verifying host key using known hosts file, will automatically accept unseen keys
 > git fetch --no-tags --force --progress -- ssh://git@bitbucket.sunlifecorp.com/DDM/aep-philippines-packer.git +refs/heads/master:refs/remotes/origin/master # timeout=10
Avoid second fetch
Checking out Revision 2666db071fd3e10debeee611138e4975b1ecaee8 (master)
Commit message: "adding time"
 > git config remote.origin.url ssh://git@bitbucket.sunlifecorp.com/DDM/aep-philippines-packer.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/master:refs/remotes/origin/master # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 2666db071fd3e10debeee611138e4975b1ecaee8 # timeout=10
 > git rev-list --no-walk 9c4808430403ba0de9ef421929a6c30e1b442124 # timeout=10
[Bitbucket] Notifying commit build result
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (build)
[Pipeline] withEnv
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ ls -lrt
total 12
-rw-r--r--. 1 jenkins users 1291 Jun 12 06:36 Jenkinsfile
drwxr-xr-x. 2 jenkins users  136 Jun 12 06:36 Images
-rw-r--r--. 1 jenkins users 3427 Jun 12 06:36 ReadMe.md
-rw-r--r--. 1 jenkins users  142 Jun 12 06:36 pipeline_config.groovy
drwxr-xr-x. 3 jenkins users  141 Jun 12 06:36 packer
[Pipeline] withCredentials
Masking supported pattern matches of $AWS_ACCESS_KEY_ID or $AWS_SECRET_ACCESS_KEY
[Pipeline] {
[Pipeline] sh
+ mkdir secrets
+ aws secretsmanager get-secret-value --secret-id poc/mongodb --query SecretString --region ca-central-1 --output text
+ sed s/{"slfuser":"//g slfuser
+ sed s/"}//g slfuser.txt
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] sh
+ ls -lrt
total 20
-rw-r--r--. 1 jenkins users 1291 Jun 12 06:36 Jenkinsfile
drwxr-xr-x. 2 jenkins users  136 Jun 12 06:36 Images
-rw-r--r--. 1 jenkins users 3427 Jun 12 06:36 ReadMe.md
-rw-r--r--. 1 jenkins users  142 Jun 12 06:36 pipeline_config.groovy
drwxr-xr-x. 3 jenkins users  141 Jun 12 06:36 packer
-rw-r--r--. 1 jenkins users 1693 Jun 12 06:36 slfuser
-rw-r--r--. 1 jenkins users 1681 Jun 12 06:36 slfuser.txt
drwxr-xr-x. 2 jenkins users   21 Jun 12 06:36 secrets
[Pipeline] }
[Pipeline] // script
[Pipeline] sleep
Sleeping for 5 min 0 sec
[JTE][Step - packer/machine_image_validate.call()]
[Pipeline] checkout
The recommended git tool is: NONE
using credential gitget-ssh
Fetching changes from the remote Git repository
Fetching without tags
Checking out Revision 2666db071fd3e10debeee611138e4975b1ecaee8 (master)
Commit message: "adding time"
[Pipeline] stage
[Pipeline] { (Packer: Validate)
[Pipeline] script
[Pipeline] {
[Pipeline] echo
Using Packer to validate script.
[Pipeline] sh
+ packer --version
1.7.10
 > git rev-parse --resolve-git-dir /home/jenkins/agent/workspace/ld_aep-philippines-packer_master/.git # timeout=10
 > git config remote.origin.url ssh://git@bitbucket.sunlifecorp.com/DDM/aep-philippines-packer.git # timeout=10
Fetching upstream changes from ssh://git@bitbucket.sunlifecorp.com/DDM/aep-philippines-packer.git
 > git --version # timeout=10
 > git --version # 'git version 2.30.2'
using GIT_SSH to set credentials SSH Key
[INFO] Currently running in a labeled security context
 > /usr/bin/chcon --type=ssh_home_t /home/jenkins/agent/workspace/ld_aep-philippines-packer_master@tmp/jenkins-gitclient-ssh14795936425914338558.key
Verifying host key using known hosts file, will automatically accept unseen keys
 > git fetch --no-tags --force --progress -- ssh://git@bitbucket.sunlifecorp.com/DDM/aep-philippines-packer.git +refs/heads/master:refs/remotes/origin/master # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 2666db071fd3e10debeee611138e4975b1ecaee8 # timeout=10
+ cd packer
+ packer validate .
Error: 1 error(s) occurred:

* ssh_private_key_file is invalid: stat ./secrets/slfuser: no such file or directory

  on source.pkr.hcl line 33:
  (source code not available)











execute_command = "{{ .Vars }} sudo -E -S sh '{{ .Path }}'"

def slfUser() {

    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'slf-func-ec2-aep_user', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])

    {

        sh '''

        aws secretsmanager get-secret-value --secret-id poc/mongodb --query "SecretString" --region ca-central-1 --output text > slfuser

        sed 's/{"slfuser":"//g' slfuser > slfuser.txt

        sed 's/"}//g' slfuser.txt > packer/slfuser

        '''      

    }


}

 

return this



def slfUser() {
    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'slf-func-ec2-aep_user', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']])
    {

        sh '''

        aws secretsmanager get-secret-value --secret-id poc/mongodb --query "SecretString" --region ca-central-1 --output text > slfuser

        sed 's/{"slfuser":"//g' slfuser > slfuser.txt

        sed 's/"}//g' slfuser.txt > packer/slfuser

        '''      

    }
}

pipeline {
    agent { label 'terraform-1.0.0' }

    stages {
        stage('build') {
            environment {
                AWS_POLL_DELAY_SECONDS = 10
                AWS_MAX_ATTEMPTS = 7200
				IdleTimeout = 7200000
            }
            steps {                

				node("terraform-1.0.0") { 
					linting()
				}
				
				//static_code_analysis()
				
				node("packer-1.7.10") { 

                        script { 
                            slfUser() 
                            sh '''
                            cd packer
                            ls -lrt
                            '''   
                        }                    
                    machine_image_build()
					machine_image_validate()
				}
        }
    }
}
}




FAILURE: Build failed with an exception.

* What went wrong:
'java.io.File org.gradle.api.tasks.testing.JUnitXmlReport.getDestination()'

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 37s
ERROR: Couldn't execute Gradle task. RuntimeException: Gradle build failed with exit code 1
[Pipeline] }
WARN: Unable to locate 'report-task.txt' in the workspace. Did the SonarScanner succeed?
> Task :sonarqube

Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/8.1.1/userguide/command_line_interface.html#sec:command_line_warnings
15 actionable tasks: 13 executed, 2 up-to-date
[Pipeline] // withSonarQubeEnv
[Pipeline] echo
Exception occurred during SonarQube analysisjava.lang.RuntimeException: Gradle build failed. Couldn't execute Gradle task. RuntimeException: Gradle build failed with exit code 1
[Pipeline] }
[Pipeline] // script




* What went wrong:
A problem was found with the configuration of task ':distTar' (type 'Tar').
  - Gradle detected a problem with the following location: 'C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator\build\libs\aep-template-creator.war'.

    Reason: Task ':distTar' uses this output of task ':bootWar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.

    Possible solutions:
      1. Declare task ':bootWar' as an input of ':distTar'.
      2. Declare an explicit dependency on ':bootWar' from ':distTar' using Task#dependsOn.
      3. Declare an explicit dependency on ':bootWar' from ':distTar' using Task#mustRunAfter.

    Please refer to https://docs.gradle.org/8.1.1/userguide/validation_problems.html#implicit_dependency for more details about this problem.

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to get full insights.


A problem occurred evaluating root project 'aep-template-creator'.
> Could not find method C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator\build/tmp/properties/aep-template-creator.zip() for arguments [build_8eud1v7eorz22orzd4bqeguog$_run_closure10$_closure21$_closure22$_closure26@4fdf3586] on object of type org.gradle.api.internal.file.copy.DefaultCopySpec_Decorated.


distributions {
    main {
        contents {
            into("${project.name}"){
                from "${buildDir}/libs/${project.name}.war"
            }
            into("${project.name}"){
                from "src/main/liberty/config"
            }
            into("vars"){
                from "src/main/properties/$project.name/vars"
            }
            from("${buildDir}/tmp/properties/${project.name}.zip") {
                into("") // Explicitly specify the destination directory for the file
            }
        }
    }
}



GradleVersion.getNextMajor()


> Task :compileJava UP-TO-DATE
The GradleVersion.getNextMajor() method has been deprecated. This is scheduled to be removed in Gradle 9.0. Consult the upgrading guide for further information: https://docs.gradle.org/8.1.1/userguide/upgrading_version_7.html#org_gradle_util_reports_deprecations

> Task :distTar FAILED

FAILURE: Build failed with an exception.

* What went wrong:
A problem was found with the configuration of task ':distTar' (type 'Tar').
  - Gradle detected a problem with the following location: 'C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator\build\libs\aep-template-creator.war'.

    Reason: Task ':distTar' uses this output of task ':bootWar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed.

    Possible solutions:
      1. Declare task ':bootWar' as an input of ':distTar'.
      2. Declare an explicit dependency on ':bootWar' from ':distTar' using Task#dependsOn.
      3. Declare an explicit dependency on ':bootWar' from ':distTar' using Task#mustRunAfter.

    Please refer to https://docs.gradle.org/8.1.1/userguide/validation_problems.html#implicit_dependency for more details about this problem.

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 8s
6 actionable tasks: 4 executed, 2 up-to-date




gradle.properties

artifactory_contexturl=https://artifactory.sunlifecorp.com/artifactory
version=0.0.1-SNAPSHOT
org.gradle.jvmargs=-Xmx1024m
#External Dependencies
artifactoryPluginVersion=4.15.1
nebulaReleasePluginVersion=15.3.1
sonarPlugin=2.8
springBootVersion=2.6.6
springDependencyManagementVersion=1.0.8.RELEASE
#libertyPluginVersion=2.7
#jinjaVariablePlugin=1.1.0
mapstructVersion=1.3.0.Final
parentVersion=1.0.0
springDependencyPlugin=1.0.10.RELEASE


build.gradle

plugins {
    id "java"
    id "war"
    id "java-library"
    id "maven-publish"
    id "distribution"
    id "org.sonarqube"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "com.jfrog.artifactory"
	id "nebula.release"
}

ext['log4j2.version'] = '2.17.1'

apply plugin: "org.sonarqube"

group 'ca.sunlife.aep'

//version "${version}"
sourceCompatibility = 1.8

compileJava {
    options.incremental = false
    options.compilerArgs = [
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

springBoot {    
    buildInfo() 
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifactory{
    publish{
        defaults{
            publications("publishArtifacts")
        }
    }
}

nebulaRelease{
    releaseBranchPatterns = [/master/, /HEAD/, /main/, /(release(-|\/))?\d+(\.\d+)?\.x/, /v?\d+\.\d+\.\d+/, /develop/]
}

release{
    defaultVersionStrategy = nebula.plugin.release.git.opinion.Strategies.SNAPSHOT
}

repositories {
    maven {
        url "${artifactory_contexturl}/remote-repos"
    }
    maven {
        url "${artifactory_contexturl}/libs-release"
    }
    maven {
        url "${artifactory_contexturl}/ext-release"
    }
    maven {
        url "${artifactory_contexturl}/plugins-release"
    }
    mavenCentral()
}

bootWar {
	enabled = true
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

war{
	enabled = false
}

distributions {
    main {
        contents {
            into("${project.name}"){
                from "${buildDir}/libs/${project.name}.war"
            }
            into("${project.name}"){
                from "src/main/liberty/config"
            }
            into("vars"){
                from "src/main/properties/$project.name/vars"
            }
            from "${buildDir}/tmp/properties/${project.name}.zip"
        }
    }
}

distZip {
    eachFile { file ->
        String path = file.relativePath
        file.setPath(path.substring(path.indexOf("/")+1,path.length()))
    }
    includeEmptyDirs = false
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation('org.springframework:spring-web')
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.2")
    implementation("org.projectlombok:lombok")
    implementation("org.apache.httpcomponents:httpclient:4.5")
    implementation("org.apache.commons:commons-lang3:3.0")
    implementation("commons-configuration:commons-configuration:1.7")
    implementation("org.apache.httpcomponents:httpmime:4.3.1")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:2.3.4.RELEASE")
    implementation("org.bouncycastle:bcprov-jdk15on:1.65.01")
    implementation("commons-codec:commons-codec:1.10")
    implementation("org.jsoup:jsoup:1.13.1") 
    annotationProcessor("org.projectlombok:lombok")
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.security:spring-security-test')
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation('org.postgresql:postgresql')
    compileOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly ('org.postgresql:postgresql')
    providedRuntime ('org.springframework.boot:spring-boot-starter-tomcat')
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'junit', module: 'junit'
    }
    implementation "org.sonarqube:org.sonarqube.gradle.plugin:2.8"

}

test {
    useJUnitPlatform()
}

publishing{
    publications{
        publishArtifacts(MavenPublication){
        	artifactId 'aep-template-creator'
            artifact source: distZip, classifier: "dist", extension: "zip"
        }
    }
}

if(hasProperty('profile')){
    apply from:"${profile}-profile.gradle"
}






distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https://artifactory.sunlifecorp.com/artifactory/gradle-services/distributions/gradle-6.8.3-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists



WLP_SKIP_MAXPERMSIZE=true
WLP_SKIP_UMASK=true
IBM_HEAPDUMPDIR=logs
IBM_COREDIR=logs
IBM_JAVACOREDIR=logs
JAVA_HOME=/opt/ibm/java/jre
DB_URL=<DB_URL>
DB_portNumber=<DB_portNumber>
DB_databaseName=<DB_databaseName>
DB_user=<DB_user>
DB_password=<AES Encrypted DB_password> 
# Please note that DB Password must be Encrypted because
# server.env file would be just encoded and saved as a secret configuration in K8 overlays.


---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: aep-templatecreator
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        sunlife.com/app: aep-templatecreator-pod
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    sunlife.com/app: aep-templatecreator-pod
                topologyKey: kubernetes.io/hostname
      containers:
      - name: aep-templatecreator-container
        image: prod-dtr-ca.sunlifecorp.com/dsaep/template-creator-api:19
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "25m"
            memory: 256Mi
          limits:
            cpu: "500m"
            memory: 2048Mi
        ports:
         - name: pod-http-port
           containerPort: 9080
           protocol: TCP
         - name: pod-https-port
           containerPort: 9443
           protocol: TCP
        readinessProbe:
          httpGet:
            port: pod-http-port
            path: /LBHealthCheck/HealthCheck
          initialDelaySeconds: 5
          periodSeconds: 1
        livenessProbe:
          httpGet:
            port: pod-http-port
            path: /LBHealthCheck/HealthCheck
          initialDelaySeconds: 60
          periodSeconds: 60
        volumeMounts:
          - name: logs-volume
            mountPath: /output/logs
            subPath: env/WHS-01/openlb
          - name: liberty-serverenv-secret-vol
            mountPath: /config/server.env
            subPath: server.env
      initContainers:
      - name: whs-liberty-permission-fix-container
        image: prod-dtr-ca.sunlifecorp.com/whs/toolbox:1.0.0
        command: ["/bin/chown","-R","1001:0", "/output/logs"]
        volumeMounts:
          - name: logs-volume
            mountPath: /output/logs
            subPath: env/WHS-01/openlb
      volumes:
      - name: logs-volume
        emptyDir: {}
      - name: liberty-serverenv-secret-vol
        secret:
          secretName: liberty-serverenv-secret



apiVersion: v1
data:
  server.env: V0xQX1NLSVBfTUFYUEVSTVNJWkU9dHJ1ZQ0KV0xQX1NLSVBfVU1BU0s9dHJ1ZQ0KSUJNX0hFQVBEVU1QRElSPWxvZ3MNCklCTV9DT1JFRElSPWxvZ3MNCklCTV9KQVZBQ09SRURJUj1sb2dzDQpKQVZBX0hPTUU9L29wdC9pYm0vamF2YS9qcmUNCkRCX1VSTD1zbGYtY2EtbW8tZG1zLXBkLWFlcC5jb3dic3lkNDhsYnkuY2EtY2VudHJhbC0xLnJkcy5hbWF6b25hd3MuY29tDQpEQl9wb3J0TnVtYmVyPTg1MzANCkRCX2RhdGFiYXNlTmFtZT1hZXANCkRCX3VzZXI9ZnVuY19hZXANCkRCX3Bhc3N3b3JkPXthZXN9QUlRdzZGL2FvQnlKdnJZYVI1L2tmVkZHSkh5MzhWWk4ybE5VYkg4RlJudVVRbGtvTEhUK0xab1VhdWhWMVl2VGl3PT0=
kind: Secret
metadata:
  creationTimestamp: null
  name: liberty-serverenv-secret
  namespace: dev-dsaep-templatecreator-ns




# DS AEP Container Image Repository

## Introduction

This repository contains Docker files and configurations required for AEP-related Docker container images.

## How it Works

### Explaining the Project Structure:
1. Configuration Folder:
    - `application.xml`: It is a Liberty-specific config file that stores DB configuration, drivers, and Bitbucket keystore.
    - `BitBucketKeyStore.jks`: It is a Java keystore that contains keys and values.
    - `jvm.options`: It stores Java options and paths of different properties, log files, and other configurations.
    - `key.xml`: It holds the key used to decrypt keys encrypted in Liberty.
    - `logback.xml`: This is the logback file that defines loggers and appenders for the application.

   **Note:** All the above files are copied to the `/config` folder in the container.

2. K8s Folder: It contains the `base` and `overlays` directories. The `base` directory contains the base Kubernetes resource configuration, and `overlays` contains the environment-specific Kubernetes configuration. Mainly from the `overlays` folder, we are trying to overwrite the `liberty-deployment` file (which has all POD-related info and labels) and `liberty-service` file, which has port configurations for mapping the POD ports to Service ports.

### How it Works Locally:
- To test it locally, you need to edit the Dockerfile:
  - In case you want to refer to the local WAR file generated from the `template-creator` project:
    1. Comment the following lines:
        ```Dockerfile
        # ARG Artifactory_URL_AEP_Template_Creator=${Artifactory_URL_AEP_Template_Creator} && \
        #     cd /tmp && wget -q -U DS_AEP_Docker $Artifactory_URL_AEP_Template_Creator && \
        #     unzip aep-template-creator*.zip && \
        #     mv /tmp/aep-template-creator/aep-template-creator.war /config/dropins/spring && \
        #     cd /tmp && rm -rf aep*
        ```
    2. Uncomment the line and add the local directory path of the WAR file:
        ```Dockerfile
        # COPY --chown=default:root ./localdir/localwar.war /config/dropins/
        ```
    
    Your Dockerfile will look like:
    ```Dockerfile
    ./images/image1
    ```

  - In case you want to refer to `dist.jar` in Artifactory:
    1. Comment the following line:
        ```Dockerfile
        # ARG Artifactory_URL_AEP_Template_Creator=${Artifactory_URL_AEP_Template_Creator}
        ```
    2. Add the following line:
        ```Dockerfile
        # ARG Artifactory_URL_AEP_Template_Creator=https://artifactory.sunlifecorp.com/artifactory/libs-snapshot-local/ca/sunlife/aep/aep-template-creator/1.1.0-SNAPSHOT/aep-template-creator-1.1.0-20230508.144751-2-dist.zip
        ```
    
    Your Dockerfile will look like:
    ```Dockerfile
    ./images/image1
    ```

- After editing the Dockerfile, build the Docker image using the command:
docker build .


- Then run the Docker image to create a container and map the port to `9080`:

docker run -p 9080:9080 <name of your image>


- To see the logs, execute:




# DS AEP Container Image Repository

## Introduction

This repo. contains docker files and configurations required for AEP related docker container images.

## How it Works

### Explaining the project structure:
1. Configuration Folder:
    i. application.xml : It is liberty specific config file which stores DB confiuration and its drivers and bitbucket keystore
    ii. BitBucketKeyStore.jks: Its java key store having keys and values
    iii. jvm.options : It stores java options and paths of different properties, log files and other configs
    iv.  key.xml : It holds the key that is used to decrypt keys encrypted in liberty
    v. logback.xml : This is the logback file that defines loggers and appender for the application

Note: All above files are copied to /config folder in container

2. K8s Folder: It contains the base and overlays directory where base directory contains the base kubernetes resources configuration and overlays contains the environment specific 
kubernetes configuration. mainly from the overlays folder we are trying to overwrite liberty-deployment file (which has all POD related info and labels) and liberty-service file whicj
has port configurations like which ports of POD points to which port of Service

### How does it works locally:
- For testing it locally, you need to edit the docker file:
    > In case, you want to refer the locol WAR file generated from template-creator project:
        i. Comment the following lines:
             ARG Artifactory_URL_AEP_Template_Creator=${Artifactory_URL_AEP_Template_Creator}
             && cd /tmp && wget -q -U DS_AEP_Docker $Artifactory_URL_AEP_Template_Creator \
             && unzip aep-template-creator*.zip \
             && mv /tmp/aep-template-creator/aep-template-creator.war /config/dropins/spring \
             && cd /tmp && rm -rf aep*
        ii. Uncomment the line and add your local directory path of WAR file:
             COPY --chown=default:root ./localdir/localwar.war /config/dropins/
        
        So your docker file will look like:
        ./images/image1
    
    > In case, you want to refer dist.jar in artifactory:
        i. Comment the below line:
            ARG Artifactory_URL_AEP_Template_Creator=${Artifactory_URL_AEP_Template_Creator}
        ii. Add the below line:
             ARG Artifactory_URL_AEP_Template_Creator=https://artifactory.sunlifecorp.com/artifactory/libs-snapshot-local/ca/sunlife/aep/aep-template-creator/1.1.0-SNAPSHOT/aep-template-creator-1.1.0-20230508.144751-2-dist.zip

        So your docker file will look like:
        ./images/image1

- After docker file is edited, build the docker image using command:
    docker build .

- Then Run the docker image to create a container and map port to 9080:
    docker run -p 9080:9080 <name of your image>

- To see the logs, do:
    docker exec -it <container name> bash
    cd /output/logs/message.log

- To test the application use     http://localhost:9080/TemplateCreator

## Maintained By

DS MDPowers Team


E CWWKZ0002E: An exception occurred while starting the application aep-template-creator. The exception message was: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution


<library id="postgresql-library">
  <fileset dir="path/to/driver/files" includes="postgresql-*.jar" />
</library>


<jdbcDriver id="postgresql-driver" libraryRef="postgresql-library" javax.sql.XADataSource="org.postgresql.xa.PGXADataSource" />

spring:
  datasource:
    jdbc-driver: postgresql-driver



[5/29/23 9:57:15:383 EDT] 00000047 com.ibm.ws.app.manager.AppMessageHelper                      E CWWKZ0002E: An exception occurred while starting the application aep-template-creator. The exception message was: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Generic.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.ConnectionPoolDataSource]: Specified class is an interface


[5/29/23 9:04:19:947 EDT] 0000004d com.ibm.ws.app.manager.AppMessageHelper                      E CWWKZ0002E: An exception occurred while starting the application aep-template-creator. The exception message was: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception; nested exception is org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: Failed to determine a suitable driver class



spring:
  profiles:
    active: <your-spring-profile>
  datasource:
    url: jdbc:postgresql://slf-ca-mo-dms-pp-dbts-paeppd.chgjaq9poran.ca-central-1.rds.amazonaws.com:1480/aep
    username: func_aepschem_rw
    password: '{aes}AEuKN3G0PEfp60BxqkyPsKNZEdy05YEfBF6C/SPsFg4wTaL36fCiElGgDYMkgyt1sQ=='


<?xml version="1.0" encoding="UTF-8"?>
<server>
    <featureManager>
        <feature>springBoot-2.0</feature>
        <feature>servlet-4.0</feature>
		<feature>appSecurity-3.0</feature>		
		<feature>jdbc-4.2</feature>
    </featureManager>
	
	<include location="/config/key.xml" />
	
	<keyStore id="BitBucketKeyStore"
        location="/config/BitBucketKeyStore.jks"
        type="JKS"
        password="{aes}AC2GSHbtW7xNoiPVyAgjBAKu01U1gBc01PB91l8XhlQz"/>

    
    <spring>
        <profile>dev</profile>  		
	<dataSource id="AEPTemplateServiceDB_dev"
                jndiName="AEPTemplateServiceDB_dev"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
  
    <properties serverName="slf-ca-mo-dms-pd-aep.cowbsyd48lby.ca-central-1.rds.amazonaws.com"
                    portNumber="8530"
                    databaseName="aep"
                    user="aep"
                    password="{aes}AIQw6F/aoByJvrYaR5/kfVFGJHy38VZN2lNUbH8FRnuUQlkoLHT+LZoUauhV1YvTiw=="/>    

    </dataSource>
    </spring>

    
    <spring>
        <profile>stage</profile>  		
	<dataSource id="AEPTemplateServiceDB_stage"
                jndiName="AEPTemplateServiceDB_stage"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
  
    <properties serverName="slf-ca-mo-dms-pp-dbts-paeppd.chgjaq9poran.ca-central-1.rds.amazonaws.com"
                    portNumber="1480"
                    databaseName="aep"
                    user="func_aepschem_rw"
                    password="{aes}AEuKN3G0PEfp60BxqkyPsKNZEdy05YEfBF6C/SPsFg4wTaL36fCiElGgDYMkgyt1sQ=="/>    

    </dataSource>
    </spring>

   
    <spring>
        <profile>prod</profile>  		
	<dataSource id="AEPTemplateServiceDB_prod"
                jndiName="AEPTemplateServiceDB_prod"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
  
    <properties serverName="slf-ca-mo-dms-pp-dbts-paeppd.chgjaq9poran.ca-central-1.rds.amazonaws.com"
                    portNumber="1480"
                    databaseName="aep"
                    user="func_aepschem_rw"
                    password="{aes}AEuKN3G0PEfp60BxqkyPsKNZEdy05YEfBF6C/SPsFg4wTaL36fCiElGgDYMkgyt1sQ=="/>    

    </dataSource>
    </spring>    

    <jdbcDriver id="postgresql-driver"
                javax.sql.XADataSource="org.postgresql.xa.PGXADataSource"
                javax.sql.ConnectionPoolDataSource="org.postgresql.ds.PGConnectionPoolDataSource"
                libraryRef="postgresql-library"/>

    <library id="postgresql-library">
        <fileset id="PostgreSQLFileset" dir="/config"
                includes="postgresql-42.2.11.jar"/>
    </library>
	
	
</server>





server:
  servlet:
    context-path: '/TemplateCreator'
spring: 
  jpa: 
    properties:
      hibernate.temp.use_jdbc_metadata_defaults: false
    hibernate:  
      ddl-auto: validate  
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    jndi-name: AEPTemplateServiceDB_stage
#    url: jdbc:postgresql://slf-ca-mo-dms-pd-aep.cowbsyd48lby.ca-central-1.rds.amazonaws.com:8530/aep
#    username: aep
#    password: 'CbH85kxfUF5qXZoqMgQ202TLhvfVty5KaZuW2ud2LLM='
logging:
    config: '/config/logback.xml'
#    config: 'C:/eclipse/workspace/AEP-TemplateCreator/src/main/resources/logback.xml'


config/dropins/spring










[5/29/23 2:14:36:998 EDT] 00000052 com.ibm.ws.app.manager.AppMessageHelper                      E CWWKZ0002E: An exception occurred while starting the application aep-template-creator. The exception message was: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'dataSource' threw exception; nested exception is org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException: Failed to look up JNDI DataSource with name 'AEPTemplateServiceDB_stage*'; nested exception is javax.naming.NameNotFoundException: AEPTemplateServiceDB_stage*


server:
  servlet:
    context-path: '/TemplateCreator'
spring: 
  jpa: 
    properties:
      hibernate.temp.use_jdbc_metadata_defaults: false
    hibernate:  
      ddl-auto: validate  
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    jndi-name: AEPTemplateServiceDB*
#    url: jdbc:postgresql://slf-ca-mo-dms-pd-aep.cowbsyd48lby.ca-central-1.rds.amazonaws.com:8530/aep
#    username: aep
#    password: 'CbH85kxfUF5qXZoqMgQ202TLhvfVty5KaZuW2ud2LLM='
logging:
    config: '/config/logback.xml'
#    config: 'C:/eclipse/workspace/AEP-TemplateCreator/src/main/resources/logback.xml'




<server>
  <!-- Existing configuration -->
  
  <spring>
    <profile>dev</profile>
    <dataSource id="AEPTemplateServiceDB"
                jndiName="AEPTemplateServiceDB"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
      <properties serverName="dev-db-host"
                  portNumber="dev-db-port"
                  databaseName="dev-db-name"
                  user="dev-db-username"
                  password="dev-db-password"/>
    </dataSource>
  </spring>

  <spring>
    <profile>stage</profile>
    <dataSource id="AEPTemplateServiceDB"
                jndiName="AEPTemplateServiceDB_Stage"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
      <properties serverName="stage-db-host"
                  portNumber="stage-db-port"
                  databaseName="stage-db-name"
                  user="stage-db-username"
                  password="stage-db-password"/>
    </dataSource>
  </spring>

  <spring>
    <profile>prod</profile>
    <dataSource id="AEPTemplateServiceDB"
                jndiName="AEPTemplateServiceDB"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
      <properties serverName="prod-db-host"
                  portNumber="prod-db-port"
                  databaseName="prod-db-name"
                  user="prod-db-username"
                  password="prod-db-password"/>
    </dataSource>
  </spring>

  <!-- Remaining configuration -->

</server>




ENV SPRING_PROFILES_ACTIVE=dev

docker run -p 8080:8080 -e SPRING_PROFILES_ACTIVE=dev myapp-image





<?xml version="1.0" encoding="UTF-8"?>
<server>
    <featureManager>
        <feature>springBoot-2.0</feature>
        <feature>servlet-4.0</feature>
		<feature>appSecurity-3.0</feature>		
		<feature>jdbc-4.2</feature>
    </featureManager>
	
	<include location="/config/key.xml" />
	
	<keyStore id="BitBucketKeyStore"
        location="/config/BitBucketKeyStore.jks"
        type="JKS"
        password="{aes}AC2GSHbtW7xNoiPVyAgjBAKu01U1gBc01PB91l8XhlQz"/>

    
    <spring>
        <profile>dev<profile>  		
	<dataSource id="AEPTemplateServiceDB"
                jndiName="AEPTemplateServiceDB"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
  
    <properties serverName="slf-ca-mo-dms-pd-aep.cowbsyd48lby.ca-central-1.rds.amazonaws.com"
                    portNumber="8530"
                    databaseName="aep"
                    user="aep"
                    password="{aes}AIQw6F/aoByJvrYaR5/kfVFGJHy38VZN2lNUbH8FRnuUQlkoLHT+LZoUauhV1YvTiw=="/>    

    </dataSource>
    </spring>

    
    <spring>
        <profile>stage<profile>  		
	<dataSource id="AEPTemplateServiceDB"
                jndiName="AEPTemplateServiceDB_Stage"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
  
    <properties serverName="slf-ca-mo-dms-stage-aep.cowbsyd48lby.ca-central-1.rds.amazonaws.com"
                    portNumber="8530"
                    databaseName="aep"
                    user="aep"
                    password="{aes}AIQw6F/aoByJvrYaR5/kfVFGJHy38VZN2lNUbH8FRnuUQlkoLHT+LZoUauhV1YvTiw=="/>    

    </dataSource>
    </spring>

   
    <spring>
        <profile>prod<profile>  		
	<dataSource id="AEPTemplateServiceDB"
                jndiName="AEPTemplateServiceDB"
                jdbcDriverRef="postgresql-driver"
                type="javax.sql.ConnectionPoolDataSource"
                transactional="true">
  
    <properties serverName="slf-ca-mo-dms-prod-aep.cowbsyd48lby.ca-central-1.rds.amazonaws.com"
                    portNumber="8530"
                    databaseName="aep"
                    user="aep"
                    password="{aes}AIQw6F/aoByJvrYaR5/kfVFGJHy38VZN2lNUbH8FRnuUQlkoLHT+LZoUauhV1YvTiw=="/>    

    </dataSource>
    </spring>    

    <jdbcDriver id="postgresql-driver"
                javax.sql.XADataSource="org.postgresql.xa.PGXADataSource"
                javax.sql.ConnectionPoolDataSource="org.postgresql.ds.PGConnectionPoolDataSource"
                libraryRef="postgresql-library"/>

    <library id="postgresql-library">
        <fileset id="PostgreSQLFileset" dir="/config"
                includes="postgresql-42.2.11.jar"/>
    </library>
	
	
</server>




FROM prod-dtr-ca.sunlifecorp.com/whs/websphere-openlb:latest_ibmjdk8

LABEL com.sunlife.image.target=prod-dtr-ca.sunlifecorp.com/dsaep/template-creator-api
LABEL com.sunlife.image.releasecandidate=TRUE

ARG Artifactory_URL_BASE=https://artifactory.sunlifecorp.com/artifactory/libs-snapshot-local
#ARG ARTIFACT_NAME=aep-template-creator-0.0.1-20210202.192614-13-dist.zip
#ARG ARTIFACT_NAME=${ARTIFACT_NAME}
#ARG Artifactory_URL_AEP_Template_Creator=${Artifactory_URL_AEP_Template_Creator}
ARG Artifactory_URL_AEP_Template_Creator=https://artifactory.sunlifecorp.com/artifactory/libs-snapshot-local/ca/sunlife/aep/aep-template-creator/1.1.0-SNAPSHOT/aep-template-creator-1.1.0-20230508.144751-2-dist.zip
#ARG Artifactory_URL_AEP_Sample=http://artifactory.sunlifecorp.com/artifactory/ei-web-hosting-services-local/applications/whs/sample/4/EnterpriseHelloWorld.ear
 
#Copy configurations files specifc to application
COPY --chown=default:root ./configurations /config

# Download Artifacts and place it in dropings folder
#RUN set -eux \
#  && wget -q -U DS_AEP_Docker -O /config/dropins/EnterpriseHelloWorld.ear $Artifactory_URL_AEP_Sample

# Download Artifacts and place it in dropings/spring folder ( For Springboot Apps)
RUN set -eux \
  && mkdir -p /config/dropins/spring \
  && cd /tmp && wget -q -U DS_AEP_Docker $Artifactory_URL_AEP_Template_Creator \
  && unzip aep-template-creator*.zip \
  && mv /tmp/aep-template-creator/aep-template-creator.war /config/dropins/spring \
  && cd /tmp && rm -rf aep*

# Added for local testing, copy artifact locally (WAR/EAR)
#COPY --chown=default:root ./localdir/localwar.war /config/dropins/

# Added for local testing, copy artifact locally (Spring Boot application.)
#COPY --chown=default:root ./localdir/localwar.jar /config/dropins/spring/filename-springboot.jar









<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" version="2.4" id="WebApp_ID">
	<display-name>aep-template-creator</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>

Invalid element name:
 - display-name

One of the following is expected:
 - distributable
 - context-param
 - filter
 - filter-mapping
 - listener
 - servlet
 - servlet-mapping
 - session-config
 - mime-mapping
 - welcome-file-list
 - error-page
 - jsp-config
 - security-constraint
 - login-config
 - security-role
 - message-destination
 - locale-encoding-mapping-list

Error indicated by:
 {http://java.sun.com/xml/ns/j2ee}
with code:





<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!-- This configuration file was written by the eclipse-cs plugin configuration 
	editor -->
<!-- Checkstyle-Configuration: SLF Checks Description: none -->
<module name="Checker">
	<property name="severity" value="warning" />
	<module name="TreeWalker">
		<module name="JavadocMethod">
			<property name="scope" value="protected" />
			<property name="allowMissingPropertyJavadoc" value="true" />
			<property name="suppressLoadErrors" value="true" />
			<property name="tokens" value="METHOD_DEF" />
		</module>
		<module name="JavadocType" />
		<module name="JavadocVariable">
			<property name="severity" value="ignore" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<module name="JavadocStyle" />
		<module name="ConstantName" />
		<module name="LocalFinalVariableName" />
		<module name="LocalVariableName" />
		<module name="MemberName" />
		<module name="MethodName" />
		<module name="PackageName" />
		<module name="ParameterName" />
		<module name="StaticVariableName" />
		<module name="TypeName" />
		<module name="AvoidStarImport" />
		<module name="IllegalImport" />
		<module name="RedundantImport" />
		<module name="UnusedImports" />
		<module name="MethodLength" />
		<module name="ParameterNumber" />
		<module name="LineLength">
			<property name="severity" value="ignore" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<module name="EmptyForIteratorPad" />
		<module name="MethodParamPad" />
		<module name="NoWhitespaceAfter">
			<property name="severity" value="ignore" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<module name="NoWhitespaceBefore" />
		<module name="OperatorWrap" />
		<module name="ParenPad" />
		<module name="TypecastParenPad" />
		<module name="WhitespaceAfter" />
		<module name="WhitespaceAround" />
		<module name="ModifierOrder" />
		<module name="RedundantModifier">
			<property name="severity" value="ignore" />
			<property name="tokens"
				value="METHOD_DEF,VARIABLE_DEF,ANNOTATION_FIELD_DEF" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<module name="AvoidNestedBlocks" />
		<module name="EmptyBlock" />
		<module name="LeftCurly" />
		<module name="NeedBraces" />
		<module name="RightCurly" />
		<module name="AvoidInlineConditionals">
			<property name="severity" value="ignore" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<!-- <module name="DoubleCheckedLocking"/> -->
		<module name="EmptyStatement" />
		<module name="EqualsHashCode">
			<property name="severity" value="ignore" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<module name="HiddenField">
			<property name="ignoreConstructorParameter" value="true" />
			<property name="ignoreSetter" value="true" />
		</module>
		<module name="IllegalInstantiation" />
		<module name="InnerAssignment" />
		<module name="MagicNumber">
			<property name="ignoreHashCodeMethod" value="true" />
			<property name="ignoreAnnotation" value="true" />
		</module>
		<module name="MissingSwitchDefault" />
		<module name="SimplifyBooleanExpression" />
		<module name="SimplifyBooleanReturn" />
		<module name="DesignForExtension">
			<property name="severity" value="ignore" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<module name="FinalClass" />
		<module name="HideUtilityClassConstructor" />
		<module name="InterfaceIsType" />
		<module name="VisibilityModifier" />
		<module name="ArrayTypeStyle" />
		<module name="FinalParameters">
			<property name="severity" value="ignore" />
			<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
				value="inherit" />
		</module>
		<module name="TodoComment" />
		<module name="UpperEll" />
	</module>
	<module name="JavadocPackage">
		<property name="severity" value="ignore" />
		<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
			value="inherit" />
	</module>
	<module name="NewlineAtEndOfFile" />
	<module name="Translation" />
	<module name="FileLength" />
	<module name="FileTabCharacter">
		<property name="severity" value="ignore" />
		<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
			value="inherit" />
	</module>
	<module name="RegexpSingleline">
		<property name="severity" value="ignore" />
		<property name="format" value="\s+$" />
		<property name="message" value="Line has trailing spaces." />
		<metadata name="net.sf.eclipsecs.core.lastEnabledSeverity"
			value="inherit" />
	</module>
</module>




<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE suppressions PUBLIC
     "-//Puppy Crawl//DTD Suppressions 1.0//EN"
     "http://www.puppycrawl.com/dtds/suppressions_1_0.dtd">

<suppressions>
	<suppress files="[\\/]target[\\/]" checks=".*" />
</suppressions>






C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator>gradle build
Inferred project: aep-template-creator, version: 1.1.0-SNAPSHOT

> Task :distTar
Execution optimizations have been disabled for task ':distTar' to ensure correctness due to the following reasons:
  - Gradle detected a problem with the following location: 'C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator\build\libs\aep-template-creator.war'. Reason: Task ':distTar' uses this output of task ':bootWar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.5.1/userguide/validation_problems.html#implicit_dependency for more details about this problem.

> Task :distZip
Execution optimizations have been disabled for task ':distZip' to ensure correctness due to the following reasons:
  - Gradle detected a problem with the following location: 'C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator\build\libs\aep-template-creator.war'. Reason: Task ':distZip' uses this output of task ':bootWar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.5.1/userguide/validation_problems.html#implicit_dependency for more details about this problem.

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.5.1/userguide/command_line_interface.html#sec:command_line_warnings

Execution optimizations have been disabled for 2 invalid unit(s) of work during this build to ensure correctness.
Please consult deprecation warnings for more details.

BUILD SUCCESSFUL in 31s
10 actionable tasks: 10 executed






plugins {
    id "java"
    id "war"
    id "java-library"
    id "maven-publish"
    id "distribution"
    id "org.sonarqube"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "com.jfrog.artifactory"
	id "nebula.release"
}

ext['log4j2.version'] = '2.17.1'

apply plugin: "org.sonarqube"

group 'ca.sunlife.aep'

//version "${version}"
sourceCompatibility = 1.8

compileJava {
    options.incremental = false
    options.compilerArgs = [
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

springBoot {    
    buildInfo() 
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifactory{
    publish{
        defaults{
            publications("publishArtifacts")
        }
    }
}

nebulaRelease{
    releaseBranchPatterns = [/master/, /HEAD/, /main/, /(release(-|\/))?\d+(\.\d+)?\.x/, /v?\d+\.\d+\.\d+/, /develop/]
}

release{
    defaultVersionStrategy = nebula.plugin.release.git.opinion.Strategies.SNAPSHOT
}

repositories {
    maven {
        url "${artifactory_contexturl}/remote-repos"
    }
    maven {
        url "${artifactory_contexturl}/libs-release"
    }
    maven {
        url "${artifactory_contexturl}/ext-release"
    }
    maven {
        url "${artifactory_contexturl}/plugins-release"
    }
    mavenCentral()
}

bootWar {
	enabled = true
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

war{
	enabled = false
}

distributions {
    main {
        contents {
            into("${project.name}"){
                from "${buildDir}/libs/${project.name}.war"
            }
            into("${project.name}"){
                from "src/main/liberty/config"
            }
            into("vars"){
                from "src/main/properties/$project.name/vars"
            }
            from "${buildDir}/tmp/properties/${project.name}.zip"
        }
    }
}

distZip {
    eachFile { file ->
        String path = file.relativePath
        file.setPath(path.substring(path.indexOf("/")+1,path.length()))
    }
    includeEmptyDirs = false
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation('org.springframework:spring-web')
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.2")
    implementation("org.projectlombok:lombok")
    implementation("org.apache.httpcomponents:httpclient:4.5")
    implementation("org.apache.commons:commons-lang3:3.0")
    implementation("commons-configuration:commons-configuration:1.7")
    implementation("org.apache.httpcomponents:httpmime:4.3.1")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:2.3.4.RELEASE")
    implementation("org.bouncycastle:bcprov-jdk15on:1.65.01")
    implementation("commons-codec:commons-codec:1.10")
    implementation("org.jsoup:jsoup:1.13.1") 
    annotationProcessor("org.projectlombok:lombok")
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.security:spring-security-test')
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation('org.postgresql:postgresql')
    compileOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly ('org.postgresql:postgresql')
    providedRuntime ('org.springframework.boot:spring-boot-starter-tomcat')
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'junit', module: 'junit'
    }
    implementation "org.sonarqube:org.sonarqube.gradle.plugin:2.8"

}

test {
    useJUnitPlatform()
}

publishing{
    publications{
        publishArtifacts(MavenPublication){
        	artifactId 'aep-template-creator'
            artifact source: distZip, classifier: "dist", extension: "zip"
        }
    }
}

if(hasProperty('profile')){
    apply from:"${profile}-profile.gradle"
}




Build Path:

Archive for required library: 'C:/Users/j245/.gradle/caches/modules-2/files-2.1/org.sonarqube/org.sonarqube.gradle.plugin/2.8/264d14d6939a5d679a31cac2db338bb624dbb776/org.sonarqube.gradle.plugin-2.8.jar' in project 'aep-template-creator' cannot be read or is not a valid ZIP file

Web.xml

Invalid element name:
- display-name

One of the following is expected:
- distributable
- context-param
- filter
- filter-mapping
- listener
- servlet
- servlet-mapping
- session-config
- mime-mapping
- welcome-file-list
- error-page
- jsp-config
- security-constraint
- login-config
- security-role
- message-destination
- locale-encoding-mapping-list

Error indicated by:
{http://java.sun.com/xml/ns/
 j2ee}
with code:

There are '39' errors in 'jsp_2_0.xsd'.

checkstyle.xml

Referenced file contains errors (http://www.puppycrawl.com/dtds/configuration_1_3.dtd).  For more information, right click on the message in the Problems View and select "Show Details..."

checkstyle-suppressions.xml
Referenced file contains errors (http://www.puppycrawl.com/dtds/suppressions_1_0.dtd).  For more information, right click on the message in the Problems View and select "Show Details..."


The project cannot be built until build path errors are resolved


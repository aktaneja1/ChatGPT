C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator>gradle build
Inferred project: aep-template-creator, version: 1.1.0-SNAPSHOT

> Task :distTar
Execution optimizations have been disabled for task ':distTar' to ensure correctness due to the following reasons:
  - Gradle detected a problem with the following location: 'C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator\build\libs\aep-template-creator.war'. Reason: Task ':distTar' uses this output of task ':bootWar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.5.1/userguide/validation_problems.html#implicit_dependency for more details about this problem.

> Task :distZip
Execution optimizations have been disabled for task ':distZip' to ensure correctness due to the following reasons:
  - Gradle detected a problem with the following location: 'C:\Users\j245\OneDrive - Sun Life Financial\AEP\Work\Template-Creator\aep-template-creator\build\libs\aep-template-creator.war'. Reason: Task ':distZip' uses this output of task ':bootWar' without declaring an explicit or implicit dependency. This can lead to incorrect results being produced, depending on what order the tasks are executed. Please refer to https://docs.gradle.org/7.5.1/userguide/validation_problems.html#implicit_dependency for more details about this problem.

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.5.1/userguide/command_line_interface.html#sec:command_line_warnings

Execution optimizations have been disabled for 2 invalid unit(s) of work during this build to ensure correctness.
Please consult deprecation warnings for more details.

BUILD SUCCESSFUL in 31s
10 actionable tasks: 10 executed






plugins {
    id "java"
    id "war"
    id "java-library"
    id "maven-publish"
    id "distribution"
    id "org.sonarqube"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
    id "com.jfrog.artifactory"
	id "nebula.release"
}

ext['log4j2.version'] = '2.17.1'

apply plugin: "org.sonarqube"

group 'ca.sunlife.aep'

//version "${version}"
sourceCompatibility = 1.8

compileJava {
    options.incremental = false
    options.compilerArgs = [
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

springBoot {    
    buildInfo() 
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifactory{
    publish{
        defaults{
            publications("publishArtifacts")
        }
    }
}

nebulaRelease{
    releaseBranchPatterns = [/master/, /HEAD/, /main/, /(release(-|\/))?\d+(\.\d+)?\.x/, /v?\d+\.\d+\.\d+/, /develop/]
}

release{
    defaultVersionStrategy = nebula.plugin.release.git.opinion.Strategies.SNAPSHOT
}

repositories {
    maven {
        url "${artifactory_contexturl}/remote-repos"
    }
    maven {
        url "${artifactory_contexturl}/libs-release"
    }
    maven {
        url "${artifactory_contexturl}/ext-release"
    }
    maven {
        url "${artifactory_contexturl}/plugins-release"
    }
    mavenCentral()
}

bootWar {
	enabled = true
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

war{
	enabled = false
}

distributions {
    main {
        contents {
            into("${project.name}"){
                from "${buildDir}/libs/${project.name}.war"
            }
            into("${project.name}"){
                from "src/main/liberty/config"
            }
            into("vars"){
                from "src/main/properties/$project.name/vars"
            }
            from "${buildDir}/tmp/properties/${project.name}.zip"
        }
    }
}

distZip {
    eachFile { file ->
        String path = file.relativePath
        file.setPath(path.substring(path.indexOf("/")+1,path.length()))
    }
    includeEmptyDirs = false
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation('org.springframework:spring-web')
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.2")
    implementation("org.projectlombok:lombok")
    implementation("org.apache.httpcomponents:httpclient:4.5")
    implementation("org.apache.commons:commons-lang3:3.0")
    implementation("commons-configuration:commons-configuration:1.7")
    implementation("org.apache.httpcomponents:httpmime:4.3.1")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:2.3.4.RELEASE")
    implementation("org.bouncycastle:bcprov-jdk15on:1.65.01")
    implementation("commons-codec:commons-codec:1.10")
    implementation("org.jsoup:jsoup:1.13.1") 
    annotationProcessor("org.projectlombok:lombok")
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.security:spring-security-test')
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation('org.postgresql:postgresql')
    compileOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly ('org.postgresql:postgresql')
    providedRuntime ('org.springframework.boot:spring-boot-starter-tomcat')
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'junit', module: 'junit'
    }
    implementation "org.sonarqube:org.sonarqube.gradle.plugin:2.8"

}

test {
    useJUnitPlatform()
}

publishing{
    publications{
        publishArtifacts(MavenPublication){
        	artifactId 'aep-template-creator'
            artifact source: distZip, classifier: "dist", extension: "zip"
        }
    }
}

if(hasProperty('profile')){
    apply from:"${profile}-profile.gradle"
}
